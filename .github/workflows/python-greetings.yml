name: Python Greetings CI/CD Pipeline

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main
  workflow_dispatch:

jobs:
  install-pip-deps:
    runs-on: self-hosted
    steps:
      - name: Checkout python-greetings repository
        uses: actions/checkout@v3.5.2
        with:
          repository: 'fastprodman/python-greetings'
          path: 'python-greetings'

      - name: Install Python dependencies
        run: pip3 install -r requirements.txt
        working-directory: ./python-greetings

  deploy-to-dev:
    needs: install-pip-deps
    runs-on: self-hosted
    steps:

      - name: Checkout python-greetings repository
        uses: actions/checkout@v3.5.2
        with:
          repository: 'fastprodman/python-greetings'
          path: 'python-greetings'
    
      - name: Stop existing service
        run: pm2 delete greetings-app-dev || true
        working-directory: ./python-greetings

      - name: Start new service
        run: pm2 start app.py --name greetings-app-dev -- --port 7001
        working-directory: ./python-greetings

      - name: Check if port 7001 is in use
        run: |
          if netstat -tuln | grep ':7001' > /dev/null; then
            echo "Something is running on port 7001."
            exit 1  # Optional: Fail the job if something is running on the port
          else
            echo "Port 7001 is free."
          fi

      - name: Check logs
        run: |
          pm2 show greetings-app-dev
          pm2 logs greetings-app-dev --lines 100

      - name: Deploy to Development Environment
        run: echo "Deploying to dev environment"

  tests-on-dev:
    needs: deploy-to-dev
    runs-on: self-hosted
    steps:
      - name: Checkout course-js-api-framework repository
        uses: actions/checkout@v3.5.2
        with:
          repository: 'fastprodman/course-js-api-framework'
          path: 'course-js-api-framework'

      - name: Install dependencies
        run: npm install
        working-directory: ./course-js-api-framework

      - name: Run tests for Development environment
        run: npm run greetings greetings_dev
        working-directory: ./course-js-api-framework
        
      - name: Run tests in Development Environment
        run: echo "Running tests on dev environment"

  deploy-to-staging:
    needs: tests-on-dev
    runs-on: self-hosted
    steps:

      - name: Checkout python-greetings repository
        uses: actions/checkout@v3.5.2
        with:
          repository: 'mtararujs/python-greetings'
          path: 'python-greetings'

      - name: Stop existing service
        run: pm2 delete greetings-app-dev || true
        working-directory: ./python-greetings

      - name: Start new service
        run: pm2 start app.py --name greetings-app-staging -- --port 7002
        working-directory: ./python-greetings

      - name: Deploy to Staging Environment
        run: echo "Deploying to staging environment"

  tests-on-staging:
    needs: deploy-to-staging
    runs-on: self-hosted
    steps:
      - name: Run tests in Staging Environment
        run: echo "Running tests on staging environment"

      - name: Install dependencies
        run: npm install
        working-directory: ./course-js-api-framework

      - name: Run tests for staging environment
        run: npm run greetings greetings_staging
        working-directory: ./course-js-api-framework
        
      - name: Run tests in staging Environment
        run: echo "Running tests on staging environment"

  deploy-to-preprod:
    needs: tests-on-staging
    runs-on: self-hosted
    steps:

      - name: Checkout python-greetings repository
        uses: actions/checkout@v3.5.2
        with:
          repository: 'mtararujs/python-greetings'
          path: 'python-greetings'

      - name: Stop existing service
        run: pm2 delete greetings-app-dev || true
        working-directory: ./python-greetings

      - name: Start new service
        run: pm2 start app.py --name greetings-app-preprod -- --port 7003
        working-directory: ./python-greetings

      - name: Deploy to Pre-Production Environment
        run: echo "Deploying to preprod environment"

  tests-on-preprod:
    needs: deploy-to-preprod
    runs-on: self-hosted
    steps:
      - name: Run tests in Pre-Production Environment
        run: echo "Running tests on preprod environment"

      - name: Install dependencies
        run: npm install
        working-directory: ./course-js-api-framework

      - name: Run tests for preprod environment
        run: npm run greetings greetings_preprod
        working-directory: ./course-js-api-framework
        
      - name: Run tests in preprod Environment
        run: echo "Running tests on preprod environment"

  deploy-to-prod:
    needs: tests-on-preprod
    runs-on: self-hosted
    steps:

      - name: Checkout python-greetings repository
        uses: actions/checkout@v3.5.2
        with:
          repository: 'mtararujs/python-greetings'
          path: 'python-greetings'

      - name: Stop existing service
        run: pm2 delete greetings-app-dev || true
        working-directory: ./python-greetings

      - name: Start new service
        run: pm2 start app.py --name greetings-app-prod -- --port 7004
        working-directory: ./python-greetings

      - name: Deploy to Production Environment
        run: echo "Deploying to prod environment"

  tests-on-prod:
    needs: deploy-to-prod
    runs-on: ubuntu-latest
    steps:
      - name: Run tests in Production Environment
        run: echo "Running tests on prod environment"

      - name: Install dependencies
        run: npm install
        working-directory: ./course-js-api-framework

      - name: Run tests for prod environment
        run: npm run greetings greetings_prod
        working-directory: ./course-js-api-framework
        
      - name: Run tests in prod Environment
        run: echo "Running tests on prod environment"

